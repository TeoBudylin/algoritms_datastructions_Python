# 2. Написать два алгоритма нахождения i-го по счёту простого числа.
# Без использования «Решета Эратосфена»;
# Используя алгоритм «Решето Эратосфена»

# результаты по таймингу

# для 1000го числа -
# "Эратосфен" затратил 0.062195539474487305 секунд
# алгоритм без Решета затратил 1.2153208255767822 таких же секунд

# для 2000го числа
# "Эратосфен" затратил 0.24710917472839355 секунд
# алгоритм без Решета затратил 5.89284610748291 таких же секунд

# для 3000го числа
# "Эратосфен" затратил 0.531597375869751 секунд
# алгоритм без Решета затратил 15.015318870544434 таких же секунд

# для 4000го числа
# "Эратосфен" затратил 0.8982157707214355 секунд
# алгоритм без Решета затратил 27.99889087677002 таких же секунд

# сложность алгоримта Решета Эратосфена похожа на О(n^2)
# сложность алгоритма без Решета Эратосфена мощнее чем О(n^2), но до О(n^3) вроде бы не дотягивает...


import time
n = 4000 # i
print(f'будем искать {n}-е по счету простое число')

# алгоритм Решета Эратосфена из интернета. он находит первые  i штук простых чисел. Возмем из них последнее
primes = [2, 3]
last_crossed = [2, 3]
def add_next_prime():
    candidate = primes[-1] + 2
    i = 0
    while i < len(primes):
        while last_crossed[i] < candidate:
            last_crossed[i] += primes[i]
        if last_crossed[i] == candidate:
            candidate += 2
            i = 0
        i += 1
    primes.append(candidate)
    last_crossed.append(candidate)

def fill_primes(n):
    while len(primes) < n:
        add_next_prime()

start_Eratosfen = time.time()
fill_primes(n)
# print(primes)
print('Это число по алгоритму с Решетом Эратосфена - ', primes[n-1])
end_Eratosfen = time.time()
print(f'"Эратосфен" затратил {end_Eratosfen - start_Eratosfen} секунд')

# мой алгоримт нахождения i-го по счёту простого числа
def my_prime(n):
    i = 0
    k = 0
    while k != n + 1:
        i += 1
        yes = 1
        for j in range (2, i):
            if i % j == 0:
                yes = 0
        if yes:
            result = i
            k += 1
            # print( result, end=' ')
    return result

my_start = time.time()
print('а по моему алгоритму без использования решета - ',my_prime(n))
my_end = time.time()
print(f'алгоритм без Решета затратил {my_end - my_start} таких же секунд')